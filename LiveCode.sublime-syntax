%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: LiveCode
file_extensions:
  - livecodescript
first_line_match:
scope: source.livecode
contexts:
  main:
    - include: blocks
    - include: inline
  blocks:
    - match: |-
        ^(?x)
          \s*(on|command|function|private\s+function|private\s+command|after|before|setProp|getProp)\s+
          (\w+)             # function name
          ((?:[\s,:\{\}]*(?:\w+)?)*)  # parameters
      comment: |
        This is not a very well-designed rule.  For now,
                                we can leave it like this though, as it sorta works.
      captures:
        1: keyword.control.function.livecode
        2: entity.name.function.handler.livecode
        3: punctuation.definition.parameters.livecode
        4: variable.parameter.handler.livecode
        5: punctuation.definition.parameters.livecode
      push:
        - meta_scope: meta.function.positional.livecode
        - match: ^\s*(end)(?:\s+(\2))?(?=\s*(--.*?)?$)
          captures:
            1: keyword.control.function.livecode
          pop: true
        - include: main
    - match: |-
        ^(?x)
          \s*(on|command|function|private\s+function|private\s+command|after|before|setProp|getProp)\s+
          (\w+)             # function name
          (?=\s*(--.*?)?$)        # nothing else
      captures:
        1: keyword.control.function.livecode
        2: entity.name.function.handler.livecode
      push:
        - meta_scope: meta.function.parameterless.livecode
        - match: ^\s*(end)(?:\s+(\2))?(?=\s*(--.*?)?$)
          captures:
            1: keyword.control.function.livecode
          pop: true
        - include: main
    - include: blocks.repeat
    - include: blocks.statement
    - include: blocks.other
  blocks.other:
    - match: ^\s*(if)\b
      captures:
        1: keyword.control.if.livecode
      push:
        - meta_scope: meta.block.if.livecode
        - match: ^\s*(end(?:\s+if)?)(?=\s*(--.*?)?$)
          captures:
            1: keyword.control.end.livecode
          pop: true
        - match: \b(then)\b
          scope: keyword.control.then.livecode
        - match: \b(else\s+if)\b
          scope: keyword.control.else-if.livecode
        - match: \b(else)\b
          scope: keyword.control.else.livecode
        - include: main
  blocks.repeat:
    - match: ^\s*(repeat)\s+(until)\b
      captures:
        1: keyword.control.repeat.livecode
        2: keyword.control.until.livecode
      push:
        - meta_scope: meta.block.repeat.until.livecode
        - match: ^\s*(end(?:\s+repeat)?)(?=\s*(--.*?)?$)
          captures:
            1: keyword.control.end.livecode
          pop: true
        - include: main
    - match: ^\s*(repeat)\s+(while)\b
      captures:
        1: keyword.control.repeat.livecode
        2: keyword.control.while.livecode
      push:
        - meta_scope: meta.block.repeat.while.livecode
        - match: ^\s*(end(?:\s+repeat)?)(?=\s*(--.*?)?$)
          captures:
            1: keyword.control.end.livecode
          pop: true
        - include: main
    - match: ^\s*(repeat)\s+(with)\s+(\w+)\b
      captures:
        1: keyword.control.repeat.livecode
        2: keyword.control.until.livecode
        3: variable.parameter.loop.livecode
      push:
        - meta_scope: meta.block.repeat.with.livecode
        - match: ^\s*(end(?:\s+repeat)?)(?=\s*(--.*?)?$)
          captures:
            1: keyword.control.end.livecode
          pop: true
        - match: \b(from|to|by)\b
          scope: keyword.control.modifier.range.livecode
        - match: \b(in)\b
          scope: keyword.control.modifier.list.livecode
        - include: main
    - match: ^\s*(repeat)\b(?=\s*(--.*?)?$)
      captures:
        1: keyword.control.repeat.livecode
      push:
        - meta_scope: meta.block.repeat.forever.livecode
        - match: ^\s*(end(?:\s+repeat)?)(?=\s*(--.*?)?$)
          captures:
            1: keyword.control.end.livecode
          pop: true
        - include: main
    - match: ^\s*(repeat)\b
      captures:
        1: keyword.control.repeat.livecode
      push:
        - meta_scope: meta.block.repeat.times.livecode
        - match: ^\s*(end(?:\s+repeat)?)(?=\s*(--.*?)?$)
          captures:
            1: keyword.control.end.livecode
          pop: true
        - match: \b(times)\b
          scope: keyword.control.times.livecode
        - include: main
  blocks.statement:
    - match: \b(local)\b
      captures:
        1: keyword.control.def.local.livecode
      push:
        - meta_scope: meta.statement.local.livecode
        - match: (?<!\\)$
          pop: true
        - match: ","
          scope: punctuation.separator.variables.local.livecode
        - match: \b\w+
          scope: variable.other.readwrite.local.livecode
        - include: inline
    - match: \b(global)\b
      captures:
        1: keyword.control.def.global.livecode
      push:
        - meta_scope: meta.statement.global.livecode
        - match: (?<!\\)$
          pop: true
        - match: ","
          scope: punctuation.separator.variables.global.livecode
        - match: \b\w+
          scope: variable.other.readwrite.global.livecode
        - include: inline
    - match: \b(constant)\b
      captures:
        1: keyword.control.def.constant.livecode
      push:
        - meta_scope: meta.statement.constant.livecode
        - match: (?<!\\)$
          pop: true
        - match: ","
          scope: punctuation.separator.variables.constant.livecode
        - match: \b\w+
          scope: variable.other.readwrite.constant.livecode
        - include: inline
    - match: \b(if)\b(?=.*\bthen\b(?!\s*(--.*?)?$))
      captures:
        1: keyword.control.if.livecode
      push:
        - meta_scope: meta.statement.if-then.livecode
        - match: (?<!\\)$
          pop: true
        - include: inline
  comments:
    - match: ^\s*(#).*$\n?
      scope: comment.line.number-sign.livecode
      captures:
        1: punctuation.definition.comment.livecode
    - match: (--).*$\n?
      scope: comment.line.double-dash.livecode
      captures:
        1: punctuation.definition.comment.livecode
    - match: \/\*
      captures:
        0: punctuation.definition.comment.livecode
      push:
        - meta_scope: comment.block.livecode
        - match: \*\/
          captures:
            0: punctuation.definition.comment.livecode
          pop: true
        - include: comments.nested
  comments.nested:
    - match: \/\*
      captures:
        0: punctuation.definition.comment.livecode
      push:
        - meta_scope: comment.block.livecode
        - match: \*\/
          captures:
            0: punctuation.definition.comment.livecode
          pop: true
        - include: comments.nested
  inline:
    - include: comments
    - include: data-structures
    - include: built-in
    - include: standardadditions
